{"name":"Twit","tagline":"Training wheels for Git.","body":"Twit is an accessible version-control system based on the widely popular\r\n[Git](http://git-scm.com) program.\r\n\r\n## Installation\r\n\r\nTo install, simply run:\r\n\r\n    gem install twit\r\n\r\n(On some systems, this may require `sudo`.)\r\n\r\n## Usage\r\n\r\nVersion control allows you to keep track of **changes** to a project over time.\r\n\r\n### Example: roll back with `rewind`\r\n\r\nBob is working on an essay for English class. He creates a folder called\r\n`myessay` and wants to track his changes.\r\n\r\nFirst, he needs to turn that folder into a version-controlled **repository**.\r\nThis is done with the `init` command:\r\n\r\n    cd myessay\r\n    twit init\r\n\r\nThen, Bob writes an initial draft of his essay in `myessay/essay.txt`. He can\r\nthen take a snapshot of his first draft using:\r\n\r\n    twit save\r\n\r\nEach time he makes some edits to the paper, he runs `twit save` again.\r\n\r\nOne day, he decides to restructure the essay entirely. He makes several `save`s\r\nwith his big changes, deleting large amounts of text.\r\n\r\nThe next day he realizes that his restructuring effort was a huge mistake and\r\nwants to recover the way his essay used to be. With version control, you can\r\nroll back to any previous save point you've marked with `save`.\r\n\r\nBob uses `rewind` to go back three `save`s ago:\r\n\r\n    twit rewind 3\r\n\r\n**Note:** using version control and frequent `save`s has a few benefits over\r\nsimply making a bunch of copies of your folder. One such benefit is space --\r\nTwit (and its backend Git) only saves *changes* to your repository rather than\r\ncopying the entire thing. If you have a project with big files, this can save a\r\nlot of hard disk space. Also, just typing `twit save` is faster than copying,\r\npasting, and renaming your new folder with some sort of label so you can find\r\nit later. This encourages you to make more checkpoints, which gives you more\r\npoints to roll back to.\r\n\r\n### Example: using branches for a computer science class\r\n\r\n**Branches** are like bookmarks at different save points. They allow you to\r\nquickly switch between different versions of your repository.\r\n\r\nIn his computer science class, Bob has a three-part computer lab assignment. In\r\nthe first part, he must write a program, and in the second and third parts, he\r\nmust modify the program he wrote in two different ways.\r\n\r\nBob creates a folder called `cslab` and initializes it as a repository.\r\n\r\n    cd cslab\r\n    twit init\r\n\r\nHe completes the first part of the assignment. He now uses `saveas` to create a\r\nnew branch containing his completed part one code.\r\n\r\n    twit saveas part1\r\n\r\nHe then works on part two. Once that's working, he can create *another* branch:\r\n\r\n    twit saveas part2\r\n\r\nNow, he has a problem -- the code he wrote for part two is making it really\r\nhard to finish part three! That's okay -- it's easy to switch back to the part\r\none branch.\r\n\r\n    twit open part1\r\n\r\nNow the repository is reverted back to the way it was in part one. (The part\r\ntwo code is still saved in the `part2` branch -- it's just stored elsewhere for\r\nnow.)\r\n\r\nFrom the part one code, Bob can finish the thirt part and run\r\n\r\n    twit saveas part3\r\n\r\nNow there are three branches: `part1`, `part2`, and `part3`. Any of them can be\r\naccessed with `twit open`, so Bob can easily show the professor his work.\r\n\r\n## Motivation (written for programmers)\r\n\r\nTwit is a wrapper for [Git](http://git-scm.com) that abstracts concepts that\r\nmany newcomers find tedious or confusing (at the cost of significant\r\nflexibility).\r\n\r\nWhen explaining version control to newcomers, the benefits are often unclear\r\namid the complicated rules and syntax of a powerful tool like Git. Twit aims to\r\nprovide an *easy and functional* demonstration of the usefulness of a branching\r\nversion control system.\r\n\r\nFor example, you can say that \"version control allows you to save snapshots of\r\nyour project history.\" However, in order to do this, you need to understand\r\nGit's two-step stage-then-commit workflow, with all its corner cases regarding\r\nnew/deleted/moved files. `git commit -a` ignores new files, `git add .` won't\r\nstage file deletions, etc -- even `git add --all` has to be run from the root\r\nof the working tree.\r\n\r\nInstead, Twit exposes a simple command to create a new commit with a snapshot\r\nof the repository:\r\n\r\n    twit save\r\n\r\nThis stages *all* changes (including new files and deletions) and creates a\r\ncommit, prompting the user for a commit message if needed.\r\n\r\nTo create a new branch (and save any changes to the new branch as well):\r\n\r\n    twit saveas my_new_branch\r\n\r\nIf the user forgets to supply the branch argument and just uses `twit saveas`,\r\nthe CLI will nicely prompt them for a new branch name.\r\n\r\nThis quick-and-easy approach allows a new user to get started using version\r\ncontrol right away, without having to learn Git's minutiae.\r\n\r\nHowever, this simple program is **not** meant to replace Git for the power\r\nuser. The interface was designed to be user-friendly at the cost of\r\nflexibility.\r\n\r\nGit has a staging area for a reason -- atomic commits are important. Using\r\n`twit save` will almost certainly result in commits with batches of changes\r\nmangled together. *That's okay.* Twit isn't for professionals -- it's Git for\r\nyour mother to write a book, or for non-coders to add documentation to an open\r\nsource project. Best of all, **the repository is still Git underneath**, so\r\npeople can transition easily.\r\n\r\nIf you are a programmer, you should probably just buckle down and [learn\r\ngit](http://gitref.org). Instead, Twit serves as an introduction to version\r\ncontrol for users that would probably never learn Git, like writers or\r\nstudents.\r\n\r\n## Command Reference\r\n\r\n### `init` -- create a new repository\r\n\r\n    twit init\r\n\r\nInitialize a new git repository in the current directory.\r\n\r\nEquivalent to: `git init`\r\n\r\n### `save` -- commit all new changes to the current branch\r\n\r\n    twit save [DESCRIBE_CHANGES]\r\n\r\nTake a snapshot of all files in the directory.\r\n\r\nAny changes on the working tree will be committed to the current branch.\r\n\r\nEquivalent to: `git add --all && git commit -m <DESCRIBE_CHANGES>`\r\n\r\n### `saveas` -- commit all new changes to a new branch\r\n\r\n    twit saveas [NEW_BRANCH] [DESCRIBE_CHANGES]\r\n\r\nEquivalent to: `git checkout -b <NEW_BRANCH>` then `twit save`\r\n\r\n### `open` -- open another branch\r\n\r\n    twit open [BRANCH]\r\n\r\nEquivalent to: `git checkout <branch>`\r\n\r\n### `rewind` -- permanently rewind a branch\r\n\r\n    twit rewind [AMOUNT]\r\n\r\n**Permanently** move a branch back AMOUNT saves.\r\n\r\nEquivalent to: `git reset --hard HEAD~<amount>`\r\n\r\n### `discard` -- permanently delete unsaved changes\r\n\r\n    twit discard\r\n\r\n**Permanently** delete any unsaved changes to the current branch. Be careful!\r\n\r\nEquivalent to: `git reset --hard`\r\n\r\n### `list` -- show all branches\r\n\r\n    twit list\r\n\r\nEquivalent to: `git branch`\r\n\r\n## API\r\n\r\nAll command-line functions are available for use as a Ruby library as well.\r\n\r\n    require 'twit'\r\n\r\n    # Create a new repository\r\n    repo = Twit.init\r\n\r\n    # Make some changes to the directory\r\n    File.open('foo', 'w') { |f| f.write('bar\\n') }\r\n\r\n    # Take a snapshot\r\n    Twit.save \"Add some foo\"\r\n\r\n    # Create a new branch\r\n    Twit.saveas \"feature-branch\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}